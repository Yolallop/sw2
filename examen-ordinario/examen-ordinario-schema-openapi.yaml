openapi: 3.0.3
info:
  description: |-
    My Card Game documentation
  version: 1.0.0
  title: Card Game
tags:
  - name: card
    description: Everything about the Card Game
paths:
  /card:
    get:
      summary: GET all cards
      description: GET all cards
      responses:
        "200":
          description: "OK"
          content:
             application/json:
              schema: 
                $ref: '#/components/schemas/Cards'
    post:
      tags:
        - card
      summary: Add a new card to the game
      description: Add a new card to the game
      operationId: addCard
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Add a new card to the game
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
  /card/{cardId}:
    parameters:
      - $ref: '#/components/parameters/ID'
    get:
      tags:
        - card
      summary: Find card by ID
      description: Returns a single card
      operationId: getCardById
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Card'
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - card
      summary: Deletes a card
      description: ''
      operationId: deleteCard
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid card ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deck:
    get:
      tags:
        - deck
      summary: GET all decks
      description: Retrieve all decks with pagination
      operationId: getDecks
      parameters:
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
        - name: next
          in: query
          description: Pagination token for the next set of results
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decks'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - deck
      summary: Create a new deck
      description: Create and share a new deck of cards
      operationId: createDeck
      requestBody:
        description: Add a new deck to the game
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '201':
          description: Deck created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deck/{heroID}:
    parameters:
      - $ref: '#/components/parameters/heroID'
    get:
      tags:
        - deck
      summary: Get a deck by heroID
      description: Get details of a specific deck by heroID
      operationId: getDeckByHeroID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Invalid heroID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - deck
      summary: Update a deck
      description: Update a specific deck by heroID
      operationId: updateDeck
      requestBody:
        description: Update an existing deck
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Invalid heroID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - deck
      summary: Delete a deck
      description: Delete a specific deck by heroID
      operationId: deleteDeck
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid heroID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    heroID:
      description: Hero card ID
      name: heroID
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"
    ID:
      description: Card ID
      name: cardId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"
  schemas:
    # Crear get de cartas solo cogiendo parte y haciendo paginacion
    Cards:
      type: object
      properties:
        results:
          $ref: "#/components/schemas/CardsArray"
        next:
          type: string
          description: Card next ID for pagination search
      required:
        - results
        - next
    CardsArray:
      type: array
      items:
        $ref: "#/components/schemas/CardMin"
    CardMin:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        name:
          $ref: "#/components/schemas/Name"
        type:
          $ref: "#/components/schemas/Type"
      required:
        - _id
        - name
        - type
    Card:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        name:
          $ref: "#/components/schemas/Name"
        text:
          $ref: "#/components/schemas/Text"
        cost:
          $ref: "#/components/schemas/Cost"
        health:
          $ref: "#/components/schemas/Health"
        thwart:
          $ref: "#/components/schemas/Thwart"
        attack:
          $ref: "#/components/schemas/Attack"
        hand_size:
          $ref: "#/components/schemas/HandSize"
        defense:
          $ref: "#/components/schemas/Defense"
        is_unique:
          $ref: "#/components/schemas/IsUnique"
        traits:
          $ref: "#/components/schemas/Traits"
        type:
          $ref: "#/components/schemas/Type"
      required:
        - _id
        - name
        - text
        - is_unique
        - traits
        - type
      oneOf:
        - $ref: "#/components/schemas/HeroCard"
        - $ref: "#/components/schemas/AllyCard"
        - $ref: "#/components/schemas/EventCard"

    HeroCard:
      type: object
      properties:
            hand_size:
              $ref: "#/components/schemas/HandSize"
            health:
              $ref: "#/components/schemas/Health"
            thwart:
              $ref: "#/components/schemas/Thwart"
            attack:
              $ref: "#/components/schemas/Attack"
            defense:
              $ref: "#/components/schemas/Defense"
      required: [hand_size, health, thwart, attack, defense]

    AllyCard:
      type: object
      properties:
          cost:
            $ref: "#/components/schemas/Cost"
          health:
            $ref: "#/components/schemas/Health"
          thwart:
            $ref: "#/components/schemas/Thwart"
          attack:
            $ref: "#/components/schemas/Attack"
      required: [cost, health, thwart, attack]
          

    EventCard:
      type: object
      properties:
            cost:
              $ref: "#/components/schemas/Cost"
      required: [cost]

    Decks:
      type: object
      properties:
        results:
          $ref: "#/components/schemas/DecksArray"
        next:
          type: string
          description: Deck next name for pagination search
      required:
        - results
        - next

    DecksArray:
      type: array
      items:
        $ref: "#/components/schemas/DeckMin"

    DeckMin:
      type: object
      properties:
        name:
          type: string
          description: Deck name
        description:
          type: string
          description: Deck description
        hero:
          type: string
          description: ID of the hero card
      required:
        - name
        - description
        - hero

    Deck:
      type: object
      properties:
        name:
          type: string
          description: Deck name
        description:
          type: string
          description: Description of the deck
        hero:
          type: string
          description: ID of the hero card
        cards:
          type: object
          minProperties: 5
          additionalProperties:
            type: integer
            minimum: 1
            maximum: 3
            description: Number of copies of the card
          description: Object containing card IDs and the number of copies (non-hero cards only)
      required:
        - name
        - description
        - hero
        - cards
      example:
        name: "Spider-Man rocks!"
        description: "The description"
        hero: "01001"
        cards:
          "01002": 1
          "01084": 1
          "01071": 2
          "01005": 3
      
    # Esquema para errores enumerados campo code y message
    Error:
      type: object
      properties: 
        code:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        message:
          type: string
          enum:
            - Invalid ID
            - Invalid input
            - Invalid ID supplied
            - Card not found
            - Invalid card ID
            - Invalid request
            - Not found
          required:
           - code
           - message

    # Esquemas para las propiedades específicas
    Type:
      type: string
      enum: ["hero", "ally", "event"]
      description: Card type
    ID:
      type: string
      description: Card ID obtained from the database
      example: 01001
    Name:
      type: string
      description: Card name
    Text: 
      type: string
      description: Card description
    IsUnique:
      type: boolean
      description: Indicates if the card is unique
    Traits:
      type: array
      items: 
        type: string
      description: Traits of the card
    Cost:
      type: integer
      description: Cost to play the card
    Health:
      type: integer
      description: Health points
    Thwart:
      type: integer
      description: Thwart value
    Attack:
      type: integer
      description: Attack value
    HandSize:
      type: integer
      description: Hand size
    Defense:
      type: integer
      description: Defense value

servers:
  - url: localhost:3000/api/
